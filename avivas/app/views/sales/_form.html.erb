<%= form_with(model: sale) do |form| %>
  <% if sale.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(sale.errors.count, "error") %> impidieron guardar la venta:</h2>

      <ul>
        <% sale.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>


  <h3>Productos</h3>
  <div id="products-container">
    <% sale.product_sales.each_with_index do |product_sale, index| %>
      <%= render 'product_fields', f: form, product_sale: product_sale, index: index %>
    <% end %>
  </div>

  <button type="button" id="add-product-button">Agregar Producto</button>

  <div>
    <%= form.label :client, style: "display: block" %>
    <%= form.text_field :client %>
  </div>

  <div>
    <%= form.submit %>
  </div>
<% end %>

<%= javascript_tag do %>
  document.addEventListener("DOMContentLoaded", function() {
    const productsContainer = document.getElementById('products-container');
    const addButton = document.getElementById('add-product-button');
    let maxIndex = <%= sale.product_sales.maximum(:id) || 0 %>;

    function setupProductSelect(select) {
      select.addEventListener('change', function(event) {
        var selectedProductId = event.target.value;
        var hiddenPriceField = event.target.closest('.product-item').querySelector('input[name$="[price]"]');

        if (selectedProductId) {
          var selectedProduct = <%= raw Product.all.to_json %>.find(product => product.id == selectedProductId);
          hiddenPriceField.value = selectedProduct.price;
        }
      });
    }

    // Setup existing product selects
    document.querySelectorAll('.product-select').forEach(setupProductSelect);

    addButton.addEventListener('click', function() {
      maxIndex++;
      const template = document.querySelector('.product-item').cloneNode(true);
      template.innerHTML = template.innerHTML
        .replace(/\[(\d+)\]/g, `[${maxIndex}]`)
        .replace(/_(\d+)_/g, `_${maxIndex}_`);

      const newSelect = template.querySelector('select');
      newSelect.value = '';
      setupProductSelect(newSelect);

      const quantityField = template.querySelector('input[type="number"]');
      quantityField.value = '';

      const idField = template.querySelector('input[name$="[id]"]');
      if (idField) idField.remove();

      productsContainer.appendChild(template);
    });
  });
<% end %>
