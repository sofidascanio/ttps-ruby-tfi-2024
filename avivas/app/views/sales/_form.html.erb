<%= form_with(model: sale) do |form| %>
  <% if sale.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(sale.errors.count, "error") %> prohibited this sale from being saved:</h2>

      <ul>
        <% sale.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  
  <div>
    <%= form.label :sale_price, style: "display: block" %>
    <%= form.text_field :sale_price %>
  </div>

  <h3>Productos</h3>
  <div id="products-container">
    <% sale.product_sales.each_with_index do |product_sale, index| %>
      <%= render 'product_fields', f: form, product_sale: product_sale, index: index %>
    <% end %>
  </div>

  <button type="button" id="add-product-button">Agregar Producto</button>

  <div>
    <%= form.label :client, style: "display: block" %>
    <%= form.text_field :client %>
  </div>

  <div>
    <%= form.submit %>
  </div>
<% end %>

<%= javascript_tag do %>
  document.addEventListener("DOMContentLoaded", function() {
    // Escuchar cambios en el campo de selección de producto
    document.querySelectorAll('.product-select').forEach(function(select) {
      select.addEventListener('change', function(event) {
        var selectedProductId = event.target.value;
        var hiddenPriceField = event.target.closest('.product-item').querySelector('input[type="hidden"]');

        if (selectedProductId) {
          // Obtener el producto con el precio correspondiente
          var selectedProduct = <%= raw Product.all.to_json %>.find(product => product.id == selectedProductId);
          hiddenPriceField.value = selectedProduct.price;
        }
      });
    });
  });

  document.addEventListener('DOMContentLoaded', function() {
  const addButton = document.getElementById('add-product-button');
  const productsContainer = document.getElementById('products-container');
  
  let index = productsContainer.children.length; // Obtener el índice inicial según los campos ya presentes

  addButton.addEventListener('click', function() {
    // Clona el último elemento como base para el nuevo
    const lastProduct = productsContainer.lastElementChild;
    const newProduct = lastProduct.cloneNode(true);

    // Actualiza el índice del nuevo producto
    newProduct.setAttribute('data-index', index);
    newProduct.innerHTML = newProduct.innerHTML.replace(/\[\d+\]/g, `[${index}]`);
    newProduct.innerHTML = newProduct.innerHTML.replace(/_\d+_/g, `_${index}_`);

    // Limpia los campos del formulario
    const selectField = newProduct.querySelector('select');
    const quantityField = newProduct.querySelector('input[type="number"]');
    selectField.value = '';
    quantityField.value = '';

    // Añade el nuevo producto al contenedor
    productsContainer.appendChild(newProduct);

    index++; // Incrementa el índice para el próximo producto
  });
});

<% end %>